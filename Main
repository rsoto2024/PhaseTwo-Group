.global _start
.data
    mem_number: .word 12
    div_result: .byte
    lenstring: .string "count length"
    copystring: .string "copy string"
    copystring2: .space 0xFF
    compstring1: .string "compare"
    compstring2: .string "compare this"
    concatstring1: .string "this and"
    concatstring2: .string "that"
    concatstring3: .space 0xFF
    myarray: .word 1, 2, 3, 4, 5
    myarraysize: .word 5
.text

/* Part A: Basic Operations Library */
_start:
/* Initialization */
    MOV R0, #0
    MOV R1, #0
    MOV R2, #0
    MOV R3, #0

/* Addition of R4 and R5 */
    ADD R0, R4, R5  @ R0 = R4 + R5
    MUL R1, R4, R5  @ R1 = R4 * R5
    BVS Overflow_error  @ Check for overflow
Overflow_error:
    CMP R5, #0
    BEQ divisor_cantbe_zero
divisor_cantbe_zero:
/* Handle division by zero error */
    MOV R0, #0
    MOV R2, R4
    B divlooptest

divloop:
    ADD R0, R0, #1  @ Increase counter/solution by 1
    SUB R2, R2, R5  @ Subtract R5 from R2
    
divlooptest:
    CMP R2, R5
    BGE divloop  @ Repeat loop until R2 < R5

    LDR R1, =div_result  @ Load memory address for division result
    STR R0, [R1]  @ Store quotient in memory location div_result

/* Bitwise operations */
    MOV R8, #0x92  @ Load binary 0x92 into R8
    MOV R9, #0x80  @ Load binary 0x80 into R9
    EOR R10, R8, R9  @ XOR R8 and R9, store result in R10
    LSL R11, R10, #3  @ Logical shift left
    LSR R11, R11, #4  @ Logical shift right
    ORR R11, R11, #0xF6  @ OR operation with 0xF6
    AND R11, R11, #0x55  @ AND operation with 0x55

/* Register and Memory Operations */
    MOV R12, R1
    LDR R12, =mem_number  @ Load memory address of mem_number
    LDR R12, [R12]  @ Load value from memory into R12
    STR R12, [R11]  @ Store value from R12 into memory at address R11

/* Stack Operations */
    SUB SP, SP, #4  @ Allocate space on the stack
    LDR R1, [SP]  @ Load value from stack into R1
    STR R1, [SP]  @ Store value from R1 back into stack
    ADD SP, SP, #4  @ Deallocate space on the stack
    PUSH {R7, R8}  @ Push R7 and R8 onto stack
    POP {R7, R8}  @ Pop values into R7 and R8 from stack

/* Part B: String Processing Library */
/* String Length Function */
str_length:
    MOV R0, #0  @ Set register to store count to 0
    LDR R1, =lenstring  @ Load string into R1

loop:
    LDRB R2, [R1, R3]  @ Load byte from string at R1 with offset in R3
    CMP R2, #0  @ Compare byte to null terminator
    BEQ str_copy  @ If null, go to next part
    ADD R0, #1  @ Increment counter
    ADD R3, #1  @ Increment offset
    B loop  @ Repeat loop

/* String Copy Function */
str_copy:
    MOV R3, #0  @ Reset offset to 0
    LDR R0, =copystring2  @ Load destination address
    LDR R1, =copystring  @ Load source string address

loop2:
    LDRB R2, [R1, R3]  @ Load byte from source string
    STRB R2, [R0, R3]  @ Store byte in destination string
    ADD R3, #1  @ Increment offset
    CMP R2, #0x00  @ Compare byte to null terminator
    BNE loop2  @ If not null, repeat

/* String Compare Function */
str_compare:
    LDR R0, =compstring1  @ Load first string
    LDR R1, =compstring2  @ Load second string
    CMP R0, R1  @ Compare the two strings
    BGT greater  @ If greater, branch to greater
    BLT less  @ If less, branch to less
    BEQ equal  @ If equal, branch to equal

greater:
    MOV R0, #1  @ Set R0 to 1 if greater
    B str_concat  @ Continue with string concatenation

less:
    MOV R0, #-1  @ Set R0 to -1 if less
    B str_concat  @ Continue with string concatenation

equal:
    MOV R0, #0  @ Set R0 to 0 if equal
    B str_concat  @ Continue with string concatenation

/* String Concatenate Function */
str_concat:
    MOV R4, #0  @ Reset offset to 0
    LDR R0, =concatstring3  @ Load space for concatenated string
    LDR R1, =concatstring1  @ Load first string
    LDR R2, =concatstring3  @ Load second string

loop3:
    LDRB R3, [R1, R4]  @ Load byte from first string
    STRB R3, [R0, R4]  @ Store byte in concatenated string
    ADD R4, #1  @ Increment offset
    CMP R3, #0x00  @ Check for null terminator
    BNE loop3  @ If not null, loop again

loop4:
    LDRB R3, [R2, R4]  @ Load byte from second string
    STRB R3, [R0, R4]  @ Store byte in concatenated string
    ADD R4, #1  @ Increment offset
    CMP R3, #0x00  @ Check for null terminator
    BNE loop4  @ If not null, loop again

/* Part C: Array Processing Library */
    LDR R0, =myarray  @ Load array address
    LDR R1, =myarraysize  @ Load array size
    LDR R1, [R1]  @ Load actual size value
    MOV R2, #0  @ Initialize loop counter
    MOV R4, #0  @ Initialize sum
    MOV R5, #0  @ Initialize max
    MOV R6, #0  @ Initialize min

    PUSH {R0, R1}  @ Preserve R0 and R1

    BL looptest  @ Start loop
    B end

loopa:
    LDR R3, [R0, R2, LSL #2]  @ Load array element
    ADD R2, R2, #1  @ Increment counter
    BL array_stats  @ Call array stats function
    B looptest

looptest:
    CMP R2, R1  @ Compare counter with array size
    BGE end  @ If finished, exit loop
    B loopa  @ Otherwise, continue loop

array_stats:
    BL sum  @ Call sum function
    BL max  @ Call max function
    BL set_min_a  @ Call min function
    CMP R2, R1  @ Check if loop is finished
    BEQ array_stats_values  @ If so, output results
    B loopa

sum:
    ADD R4, R4, R3  @ Add value to sum
    BX LR  @ Return

max:
    CMP R3, R5  @ Compare value with current max
    BGT found_max  @ If greater, update max
    BX LR

found_max:
    MOV R5, R3  @ Set new max
    MOV PC, LR  @ Return

min:
    CMP R6, #0  @ Compare with initial min value
    BLE set_min_a  @ If first element, set as min
    CMP R3, R6  @ Compare value with current min
    BLE found_min  @ If smaller, update min
    BX LR

set_min_a:
    CMP R2, #1  @ If first element, set as min
    BEQ set_min_b  @ If so, move to next step
    BX LR

set_min_b:
    MOV R6, R3  @ Set current element as min
    BX LR

found_min:
    MOV R6, R3  @ Update min
    BX LR

array_stats_values:
    MOV R0, R6  @ Return min value
    MOV R2, R4  @ Return sum
    MOV R1, R5  @ Return max value
    POP {R0, R1}  @ Restore registers

end:
